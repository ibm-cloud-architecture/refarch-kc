{"componentChunkName":"component---src-pages-microservices-order-query-index-mdx","path":"/microservices/order-query/","result":{"pageContext":{"frontmatter":{"title":"Order Management - Query","description":"In-depth description of the Order Management Query microservice component of the Reefer Container Shipment solution reference implementation."},"relativePagePath":"/microservices/order-query/index.mdx","titleType":"append","MdxNode":{"id":"78b9a017-2aa4-5a7c-8204-97b756b96885","children":[],"parent":"f2f4a778-a48a-5369-84e9-fcc1c7d13c4d","internal":{"content":"---\ntitle: Order Management - Query\ndescription: In-depth description of the Order Management Query microservice component of the Reefer Container Shipment solution reference implementation.\n---\n\n<PageDescription>\nThis project is demonstrating one possible implementation of the Command Query Responsibility Segregation (CQRS) and event sourcing patterns, as applied to the refrigerated shipping container order subdomain. It implements the order management component, responsible for managing the full lifecycle of a shipping order issued by a customer who wants to ship fresh goods overseas.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n**Description:** Main goal of the Order Management component is to manage the shipping orders for the entire shipping fleet. This component is made up of two microservices - one named Order Command and one named Order Query. The reason for the component to be split into two microservices is to implement the **Command Query Responsibility Segregation (CQRS)** pattern.\n\n![Order Query diagram](images/microservice-overview-order-query.png)\n\nThis microservice will implement the **query logic** in the CQRS pattern. It will be in charge of implementing any type of query, based on building the necessary projections over the totality of the data. In order to build those projections, this microservice can listen to more topics and events than the [Order Command](/microservices/order-command/) microservice.\n\nThis microservice has been implemented using [MicroProfile 3.0](https://microprofile.io/) and runs on [OpenLiberty](https://openliberty.io/).\n\n**Github repository:** [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\n**Folder:** [order-query-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/tree/master/order-query-ms)\n\n**Kafka topics consumed from:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n\n**Kafka topics produced to:** None\n\n**Events reacted to:**\n\n- [Order Created Event](/microservices/event-details/#order-created-event)\n- [Order Updated Event](/microservices/event-details/#order-updated-event)\n- [Order Reject Event](/microservices/event-details/#order-reject-event)\n- [Order Cancel Event](/microservices/event-details/#order-cancel-event)\n- [Order Spoilt Event](/microservices/event-details/#order-spoilt-event)\n- [Voyage Assigned Event](/microservices/event-details/#voyage-assigned-event)\n- [Container Allocated Event](/microservices/event-details/#container-allocated-event)\n- [Container Added Event](/microservices/event-details/#container-added-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n- [Container Assigned Event](/microservices/event-details/#container-assigned-event)\n\n**Events produced:** None\n\n**EDA Patterns implemented:**\n\n- Command Query Responsibility Segregation (CQRS)\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody Stack it is based on and then performing the local application build inside the containerized environment:\n\n`appsody build -t <yournamespace>/kcontainer-order-query-ms[:tag] [--push]`\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\n## Run\n\n### Deployment parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| ORDER_TOPIC                              | YES      | The topic name used for communication relating to the orders entity.                                                   |\n| CONTAINER_TOPIC                          | YES      | The topic name used for communication relating to the containers entity.                                               |\n| ERROR_TOPIC                              | YES      | The topic name used for communication relating to general application errors.                                          |\n\n\n### Volume Mounts\n\nThe Order Query microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verfiy the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/infrastructure/required-services/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running the microservice locally\n\nWhen running the microservice locally, you must specify all the required [deployment parameters](#deployment-parameters) from above as environment variables via the `--docker-options` flag being passed in from the Appsody CLI command.\n\n**Example:** `appsody run --docker-options \"-e KAFKA_BROKERS=remotebroker1:9092,remotebroker2:9092 -e ORDER_TOPIC=orders -e CONTAINERS_TOPIC=containers -v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\nFor more details on running the microservice locally, consult the [Appsody run documentation](https://appsody.dev/docs/using-appsody/local-development#appsody-local-development) as well as the deployment information contained in the [`app-deploy.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/order-query-ms/app-deploy.yaml) file.\n\n### Running the microservice remotely\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy <yournamespace>/kcontainer-order-query-ms[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs\n\n<InlineNotification kind=\"info\"><strong>TODO</strong> REST APIs documentation via Swagger</InlineNotification>\n","type":"Mdx","contentDigest":"212540bd0c9d1c56fbd0d5c28e429abd","counter":402,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Order Management - Query","description":"In-depth description of the Order Management Query microservice component of the Reefer Container Shipment solution reference implementation."},"exports":{},"rawBody":"---\ntitle: Order Management - Query\ndescription: In-depth description of the Order Management Query microservice component of the Reefer Container Shipment solution reference implementation.\n---\n\n<PageDescription>\nThis project is demonstrating one possible implementation of the Command Query Responsibility Segregation (CQRS) and event sourcing patterns, as applied to the refrigerated shipping container order subdomain. It implements the order management component, responsible for managing the full lifecycle of a shipping order issued by a customer who wants to ship fresh goods overseas.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n**Description:** Main goal of the Order Management component is to manage the shipping orders for the entire shipping fleet. This component is made up of two microservices - one named Order Command and one named Order Query. The reason for the component to be split into two microservices is to implement the **Command Query Responsibility Segregation (CQRS)** pattern.\n\n![Order Query diagram](images/microservice-overview-order-query.png)\n\nThis microservice will implement the **query logic** in the CQRS pattern. It will be in charge of implementing any type of query, based on building the necessary projections over the totality of the data. In order to build those projections, this microservice can listen to more topics and events than the [Order Command](/microservices/order-command/) microservice.\n\nThis microservice has been implemented using [MicroProfile 3.0](https://microprofile.io/) and runs on [OpenLiberty](https://openliberty.io/).\n\n**Github repository:** [refarch-kc-order-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms)\n\n**Folder:** [order-query-ms](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/tree/master/order-query-ms)\n\n**Kafka topics consumed from:**\n\n- [Order Topic](/microservices/topic-details/#orders-topic)\n- [Containers Topic](/microservices/topic-details/#containers-topic)\n\n**Kafka topics produced to:** None\n\n**Events reacted to:**\n\n- [Order Created Event](/microservices/event-details/#order-created-event)\n- [Order Updated Event](/microservices/event-details/#order-updated-event)\n- [Order Reject Event](/microservices/event-details/#order-reject-event)\n- [Order Cancel Event](/microservices/event-details/#order-cancel-event)\n- [Order Spoilt Event](/microservices/event-details/#order-spoilt-event)\n- [Voyage Assigned Event](/microservices/event-details/#voyage-assigned-event)\n- [Container Allocated Event](/microservices/event-details/#container-allocated-event)\n- [Container Added Event](/microservices/event-details/#container-added-event)\n- [Container On Maintenance Event](/microservices/event-details/#container-on-maintenance-event)\n- [Container Off Maintenance Event](/microservices/event-details/#container-off-maintenance-event)\n- [Container Assigned Event](/microservices/event-details/#container-assigned-event)\n\n**Events produced:** None\n\n**EDA Patterns implemented:**\n\n- Command Query Responsibility Segregation (CQRS)\n\n## Build\n\nThis microservice is built using the [Appsody](https://appsody.dev/) development framework. The [Appsody CLI](https://appsody.dev/docs/installing/installing-appsody) is a required prerequisite for building the application locally.\n\nAppsody will build the application by pulling the contents of the Appsody Stack it is based on and then performing the local application build inside the containerized environment:\n\n`appsody build -t <yournamespace>/kcontainer-order-query-ms[:tag] [--push]`\n\n- You can optionally specify a container tag. If left blank, `latest` will be used.\n- You can optionally supply the `--push` flag to automatically push the built image to specified remote repository.\n\nPerforming an Appsody build will update the `app-deploy.yaml` file in the same directory with current information for the application image, labels, and annotations fields.\n\n## Run\n\n### Deployment parameters\n\nThe following deployment parameters are defined in the `app-deploy.yaml` file:\n\n| Name                                     | Required | Description                                                                                                            |\n|------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------------|\n| KAFKA_BROKERS                            | YES      | Comma-separated list of Kafka brokers to connect to                                                                    |\n| KAFKA_APIKEY                             | NO       | API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters. |\n| TRUSTSTORE_ENABLED                       | NO       | Required to be set to `true` when connecting to IBM Event Streams on the IBM Cloud Pak for Integration (CP4I).         |\n| TRUSTSTORE_PATH                          | NO       | The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See [**Volume Mounts**](#volume-mounts) below.  |\n| TRUSTSTORE_PWD                           | NO       | The password for the truststore file used for IBM Event Streams server verification.                                   |\n| ORDER_TOPIC                              | YES      | The topic name used for communication relating to the orders entity.                                                   |\n| CONTAINER_TOPIC                          | YES      | The topic name used for communication relating to the containers entity.                                               |\n| ERROR_TOPIC                              | YES      | The topic name used for communication relating to general application errors.                                          |\n\n\n### Volume Mounts\n\nThe Order Query microservice requires up to one file to be injected at runtime for proper operation. As noted in the `TRUSTSTORE_PATH` parameter above, these files are SSL-based certificates which are required to verfiy the identity of the external service when calling it. These files are provided as `--docker-options \"-v host-src:container-dest ...\"` when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster.\n\nThe `TRUSTSTORE_PATH` parameter is documented in the **Event Streams Certificates** section of the [Prerequisites](/infrastructure/required-services/#ibm-event-streams-on-redhat-openshift-container-platform) page. The Appsody run command should include a parameter similar to `-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks` in its `--docker-options` string to run this microservice locally.\n\n**Example:** `appsody run --docker-options \"-v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\n### Running the microservice locally\n\nWhen running the microservice locally, you must specify all the required [deployment parameters](#deployment-parameters) from above as environment variables via the `--docker-options` flag being passed in from the Appsody CLI command.\n\n**Example:** `appsody run --docker-options \"-e KAFKA_BROKERS=remotebroker1:9092,remotebroker2:9092 -e ORDER_TOPIC=orders -e CONTAINERS_TOPIC=containers -v /Users/myuser/Downloads/es-cert.jks:/config/resources/security/es-ssl/es-cert.jks\" ...`\n\nFor more details on running the microservice locally, consult the [Appsody run documentation](https://appsody.dev/docs/using-appsody/local-development#appsody-local-development) as well as the deployment information contained in the [`app-deploy.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/order-query-ms/app-deploy.yaml) file.\n\n### Running the microservice remotely\n\nThe [Appsody Operator](https://appsody.dev/docs/reference/appsody-operator/) is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster.\n\nTo deploy the microservice to a remote cluster:\n\n`appsody deploy <yournamespace>/kcontainer-order-query-ms[:tag] --no-build`\n\n- You can omit the `--no-build` flag to have Appsody perform a build before deploying the application.\n- _**Note:**_ Performing a build at deploy time requires specifying the absolute container reference path, as well as the `--push` flag.\n- The neccesary deployment parameter information will be read from the `app-deploy.yaml` file in the same directory.\n\n## Usage Details\n\n### REST APIs\n\n<InlineNotification kind=\"info\"><strong>TODO</strong> REST APIs documentation via Swagger</InlineNotification>\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/microservices/order-query/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}