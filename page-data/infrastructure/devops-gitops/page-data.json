{"componentChunkName":"component---src-pages-infrastructure-devops-gitops-index-mdx","path":"/infrastructure/devops-gitops/","result":{"pageContext":{"frontmatter":{"title":"GitOps","description":"The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture."},"relativePagePath":"/infrastructure/devops-gitops/index.mdx","titleType":"append","MdxNode":{"id":"c8923c67-c7d8-5cba-8a61-1ab2a8ca055c","children":[],"parent":"f976d1bf-ec9e-5179-8e3e-ebd8f1ef4aa0","internal":{"content":"---\ntitle: GitOps\ndescription: The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture.\n---\n\n<PageDescription>\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n</PageDescription>\n\n# Overview\n\nOur [Continuous Integration (CI) approach](/infrastructure/devops-continuous-integration/) is one of \"zero-infrastructure overhead\". To accomplish this goal, we utilize [GitHub Actions](https://github.com/features/actions) to build and push a microservice's associated container images to [Docker Hub](https://hub.docker.com/u/ibmcase) for public consumption. The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\nOur [GitOps approach](#gitops), _the topic of this chapter_, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes [Kustomize](https://kustomize.io/) as its templating technology to utilize the `app-deploy.yaml` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.\n\nOur [Continuous Delivery (CD) approach](/infrastructure/devops-continuous-delivery/) focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.\n\n# GitOps\n\nIf you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in [this blog post](https://www.weave.works/technologies/gitops/) from WeaveWorks.\n\n<AnchorLinks small>\n  <AnchorLink>Reference Implementation environments</AnchorLink>\n  <AnchorLink>Environment overview</AnchorLink>\n  <AnchorLink>Service overview</AnchorLink>\n  <AnchorLink>Creating a new environment</AnchorLink>\n</AnchorLinks>\n\n## Reference Implementation environments\n\nWe have provided a few sample environments to get started.\n\n* [**`dev`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/dev): This environment is deployable to any Kubernetes or OCP cluster and provides its own dedicated backing services.\n\n* [**`example-credentials`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-credentials): This example configures the microservices to connect to a **Postgres database**, using the necessary credentials & the Postgres service's self-signed certificate, and to **Event Streams**, using only an API key and no additional certificates _(as the remote service utilizes a certificate that is signed by a public CA)_.  Both of these backing services are consumed from off-cluster service providers.\n\n* [**`example-es-truststore`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore): This example configures the microservices to connect to a **Postgres database**, using the necessary credentials & the Postgres service's self-signed certificate, and to **Event Streams**, using an API key and the Event Streams server's self-signed certificate. The Event Streams certificate is provided as a Java truststore to the Java-based microservices and a PEM file to the non-Java-based microservices.\n\n* [**`eda-integration-XXXX.YY`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/eda-integration-2020.08): This environment is our squad's integration environment for a fully-automated end-to-end build pipeline, with the target environment being a [Red Hat OpenShift Container Platform cluster running on IBM Cloud](https://cloud.ibm.com/kubernetes/catalog/create?platformType=openshift).\n\n## Environment overview\n\nThe GitOps environments are defined in the `environments` sub-directory, allowing for multiple environments (phases, stages, teams, etc) to be deployed from a single GitHub repository. This approach is the simplest for a single team to maintain.\n\nThere are several approaches to maintaining multiple GitOps environments, which offer tradeoffs between simplicity and access control:\n\n- **Single GitOps repository, single branch, one subdirectory per environment:** This is our chosen approach and is simple to manage. All collaborators have the same level of control over each environment.\n- **Single GitOps repository, one branch per environment:** In this approach, the `environments/` directory in each branch contains a single environment. This allows some level of access control to be set per environment, for example via branch protection rules.\n- **Multiple GitOps repositories:** In this approach, each repository represents a single environment. This allows access control per environment at the repository level, for example to protect a production environment from accidental modification.\n\nEach environment has the following default directory structure:\n\n```bash\nenvironments\n├── dev\n│   ├── apps\n│   │   └── refarch-kc\n│   │       ├── base\n│   │       │   └── kustomization.yaml\n│   │       ├── kustomization.yaml\n│   │       └── overlays\n│   │           └── kustomization.yaml\n│   ├── env\n│   │   ├── base\n│   │   │   └── kustomization.yaml\n│   │   ├── kustomization.yaml\n│   │   └── overlays\n│   │       └── kustomization.yaml\n│   ├── infrastructure\n│   │   └── kustomization.yaml\n│   ├── kustomization.yaml\n│   └── services\n│       ├── fleetms\n│       │   ├── base\n│       │   │   ├── config\n│       │   │   │   ├── app-deploy.yaml\n│       │   │   │   └── kustomization.yaml\n│       │   │   └── kustomization.yaml\n│       │   ├── kustomization.yaml\n│       │   └── overlays\n│       │       ├── kustomization.yaml\n...\n│       └── voyagesms\n│           ├── base\n│           │   ├── config\n│           │   │   ├── app-deploy.yaml\n│           │   │   └── kustomization.yaml\n│           │   └── kustomization.yaml\n│           ├── kustomization.yaml\n│           └── overlays\n│               └── kustomization.yaml\n```\n\n---\n\n### The **apps/refarch-kc** subdirectory\n\n  This subdirectory aggregates together all the microservices that comprise the `refarch-kc` reference implementation. It also applies the common label of `app.kubernetes.io/part-of: refarch-kc` to all the deployed components for easier management.\n\n  In the `dev` environment, this subdirectory also contains the `KafkaTopics` CRDs to automatically create the required Kafka Topics inside the Kafka cluster (as the `dev` environments utilizes the Strimzi Operator for cluster management).\n\n---\n\n### The **env** subdirectory\n\n  This subdirectory provides all the necessary ServiceAccount, ConfigsMap and Secret configuration. Depending upon your environment, most of your customization of a new environment will be done in this subdirectory.\n\n---\n\n### The **infrastructure** subdirectory\n\n  This optional subdirectory provides the ability to create a Kubernetes Namespace / OpenShift Project and any necessary backing services ahead of application microservice deployment. This is only used in the `dev` environment, as a way to demonstrate the ability to create a fully-managed environment from scratch.\n\n  <InlineNotification kind=\"warning\">When you create your environment via <code>kubectl apply -k environments/dev/infrastructure</code> with a <strong>Namespace</strong> definition in the <em>infrastructure</em> subdirectory, running <code>kubectl delete -k environments/dev/infrastructure</code> will delete the Namespace!</InlineNotification>\n\n---\n\n### The **services** subdirectory\n\n  This subdirectory provides all the necessary deployment configurations for the `AppsodyApplication` and `OpenLiberty` applications that make up the reference implementation. The `/base/config/app-deploy.yaml` file in each `services` subdirectory is automatically maintained by our [GitOps](/infrastructure/devops-gitops/) pipelines.\n\n  The main area of customization for individual environments will be done in each service's `overlays` subdirectory, as this subdirectory provides the ability to modify and update the base `app-deploy.yaml` file at deploy time.\n\n---\n\n## Service overview\n\nIn this section, we will walk through the Fleet microservice's [`/overlays` subdirectory ](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore/services/fleetms/overlays) to describe what operations can be performed on the base `app-deploy.yaml` through the Kustomize framework.\n\n### Adding Kafka credentials\n\nThe majority of our Kafka-based microservices look for configuration and credential information defined as environment variables upon startup. This makes it easy to configure, update, and manage running application instances when configuration and credential information changes.\n\nTo add the necessary credential information to a given microservice at deploy time, we use the [/services/fleetms/overlays/appsody-env-patch.yaml](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml) overlay to append `KAFKA_USER` and `KAFKA_PASSWORD` environment variables to list of environment variables already defined in the [base `app-deploy.yaml` file](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/base/config/app-deploy.yaml).\n\n### Adding Kafka certificates\n\nTo add the required SSL/TLS certificates necessary for connecting to secured Apache Kafka / IBM Event Streams systems, you must inject the certificate file dynamically at deploy time. This process can be completed in three steps:\n  1. Create a Kubernetes Secret containing the Certificate file\n  2. Create a Kubernetes Volume in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, based on the Secret\n  3. Create a Kubernetes VolumeMount in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, mounting the previously-defined Volume to a known location inside of a Pod.\n\nTo perform these steps in our GitOps implementation:\n  1. Step 1 is achieved through the artifacts defined in the `/env/base/credentials` subdirectory of either of the example environments.\n  2. Step 2 is achieved through the [`/services/fleetms/overlays/appsody-volumes.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volumes.yaml) overlay.\n  3. Step 3 is achieved through the [`/services/fleetms/overlays/appsody-volume-mounts.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volume-mounts.yaml) overlay and the inclusion of the well-known location of the injected Certificate via the [`/services/fleetms/overlays/appsody-env-patch.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml) overlay.\n\n## Creating a new environment\n\nTo create a new environment, you will want to use one of the environments described above as a template and refine it as needed.\n\n1. Fork this repository.\n2. Copy the desired environment to a new subdirectory in the `/environments` directory.\n3. Update the necessary `overlays/kustomization.yaml` files and referenced files to suit your environment, removing unneccessary modifications and adding in any new requirements.\n4. Manually validate the environment via a `kubectl kustomize environments/__your-new-environment__`\n5. Commit and push your changes to your forked repository\n6. Follow along with our [Continuous Delivery](/infrastructure/devops-continuous-delivery/) chapter to configure ArgoCD to deploy the environment.\n\n# Next steps\n\n_For details on how the Continuous Delivery implementation leverages the GitOps artifacts,_ reference the peer [Continuous Delivery (CD)](/infrastructure/devops-continuous-delivery/) chapter of this manual.\n","type":"Mdx","contentDigest":"d7dff5a2c40c55ac61435c508dca1be0","counter":389,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"GitOps","description":"The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture."},"exports":{},"rawBody":"---\ntitle: GitOps\ndescription: The implemented GitOps function of the DevOps pipelines for the KContainer reference implementation of the Event-Driven Reference Architecture.\n---\n\n<PageDescription>\nThe implemented DevOps pipelines for the Reefer Container Shipment solution reference implementation of the Event-Driven Reference Architecture. This chapter focuses on the <strong>GitOps</strong> capability implemented in the reference implementation.\n</PageDescription>\n\n# Overview\n\nOur [Continuous Integration (CI) approach](/infrastructure/devops-continuous-integration/) is one of \"zero-infrastructure overhead\". To accomplish this goal, we utilize [GitHub Actions](https://github.com/features/actions) to build and push a microservice's associated container images to [Docker Hub](https://hub.docker.com/u/ibmcase) for public consumption. The GitHub Actions workflows are defined in the owning repository's `.github/workflows/dockerbuild.yaml` file.\n\nOur [GitOps approach](#gitops), _the topic of this chapter_, focuses on a single-repository, environment-per-subdirectory model which can be forked and cloned to replicate deployments to other clusters and environments. The reference implementation utilizes [Kustomize](https://kustomize.io/) as its templating technology to utilize the `app-deploy.yaml` files, provided by each individual microservice, as a base and then layer in environment-specific configuration and credentials as needed.\n\nOur [Continuous Delivery (CD) approach](/infrastructure/devops-continuous-delivery/) focuses on a GitOps-based delivery model, using a GitHub repository as a single source of truth for the deployment, management, and operations of our running application components. In this model, we have the flexibility to use multiple open-source technologies to apply the single source of truth from a given GitHub repository onto a desired cluster environment.\n\n# GitOps\n\nIf you are unfamiliar with GitOps as a practice, additional details around the background of GitOps and how it differs from traditional deployment models can be found in [this blog post](https://www.weave.works/technologies/gitops/) from WeaveWorks.\n\n<AnchorLinks small>\n  <AnchorLink>Reference Implementation environments</AnchorLink>\n  <AnchorLink>Environment overview</AnchorLink>\n  <AnchorLink>Service overview</AnchorLink>\n  <AnchorLink>Creating a new environment</AnchorLink>\n</AnchorLinks>\n\n## Reference Implementation environments\n\nWe have provided a few sample environments to get started.\n\n* [**`dev`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/dev): This environment is deployable to any Kubernetes or OCP cluster and provides its own dedicated backing services.\n\n* [**`example-credentials`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-credentials): This example configures the microservices to connect to a **Postgres database**, using the necessary credentials & the Postgres service's self-signed certificate, and to **Event Streams**, using only an API key and no additional certificates _(as the remote service utilizes a certificate that is signed by a public CA)_.  Both of these backing services are consumed from off-cluster service providers.\n\n* [**`example-es-truststore`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore): This example configures the microservices to connect to a **Postgres database**, using the necessary credentials & the Postgres service's self-signed certificate, and to **Event Streams**, using an API key and the Event Streams server's self-signed certificate. The Event Streams certificate is provided as a Java truststore to the Java-based microservices and a PEM file to the non-Java-based microservices.\n\n* [**`eda-integration-XXXX.YY`** environment](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/eda-integration-2020.08): This environment is our squad's integration environment for a fully-automated end-to-end build pipeline, with the target environment being a [Red Hat OpenShift Container Platform cluster running on IBM Cloud](https://cloud.ibm.com/kubernetes/catalog/create?platformType=openshift).\n\n## Environment overview\n\nThe GitOps environments are defined in the `environments` sub-directory, allowing for multiple environments (phases, stages, teams, etc) to be deployed from a single GitHub repository. This approach is the simplest for a single team to maintain.\n\nThere are several approaches to maintaining multiple GitOps environments, which offer tradeoffs between simplicity and access control:\n\n- **Single GitOps repository, single branch, one subdirectory per environment:** This is our chosen approach and is simple to manage. All collaborators have the same level of control over each environment.\n- **Single GitOps repository, one branch per environment:** In this approach, the `environments/` directory in each branch contains a single environment. This allows some level of access control to be set per environment, for example via branch protection rules.\n- **Multiple GitOps repositories:** In this approach, each repository represents a single environment. This allows access control per environment at the repository level, for example to protect a production environment from accidental modification.\n\nEach environment has the following default directory structure:\n\n```bash\nenvironments\n├── dev\n│   ├── apps\n│   │   └── refarch-kc\n│   │       ├── base\n│   │       │   └── kustomization.yaml\n│   │       ├── kustomization.yaml\n│   │       └── overlays\n│   │           └── kustomization.yaml\n│   ├── env\n│   │   ├── base\n│   │   │   └── kustomization.yaml\n│   │   ├── kustomization.yaml\n│   │   └── overlays\n│   │       └── kustomization.yaml\n│   ├── infrastructure\n│   │   └── kustomization.yaml\n│   ├── kustomization.yaml\n│   └── services\n│       ├── fleetms\n│       │   ├── base\n│       │   │   ├── config\n│       │   │   │   ├── app-deploy.yaml\n│       │   │   │   └── kustomization.yaml\n│       │   │   └── kustomization.yaml\n│       │   ├── kustomization.yaml\n│       │   └── overlays\n│       │       ├── kustomization.yaml\n...\n│       └── voyagesms\n│           ├── base\n│           │   ├── config\n│           │   │   ├── app-deploy.yaml\n│           │   │   └── kustomization.yaml\n│           │   └── kustomization.yaml\n│           ├── kustomization.yaml\n│           └── overlays\n│               └── kustomization.yaml\n```\n\n---\n\n### The **apps/refarch-kc** subdirectory\n\n  This subdirectory aggregates together all the microservices that comprise the `refarch-kc` reference implementation. It also applies the common label of `app.kubernetes.io/part-of: refarch-kc` to all the deployed components for easier management.\n\n  In the `dev` environment, this subdirectory also contains the `KafkaTopics` CRDs to automatically create the required Kafka Topics inside the Kafka cluster (as the `dev` environments utilizes the Strimzi Operator for cluster management).\n\n---\n\n### The **env** subdirectory\n\n  This subdirectory provides all the necessary ServiceAccount, ConfigsMap and Secret configuration. Depending upon your environment, most of your customization of a new environment will be done in this subdirectory.\n\n---\n\n### The **infrastructure** subdirectory\n\n  This optional subdirectory provides the ability to create a Kubernetes Namespace / OpenShift Project and any necessary backing services ahead of application microservice deployment. This is only used in the `dev` environment, as a way to demonstrate the ability to create a fully-managed environment from scratch.\n\n  <InlineNotification kind=\"warning\">When you create your environment via <code>kubectl apply -k environments/dev/infrastructure</code> with a <strong>Namespace</strong> definition in the <em>infrastructure</em> subdirectory, running <code>kubectl delete -k environments/dev/infrastructure</code> will delete the Namespace!</InlineNotification>\n\n---\n\n### The **services** subdirectory\n\n  This subdirectory provides all the necessary deployment configurations for the `AppsodyApplication` and `OpenLiberty` applications that make up the reference implementation. The `/base/config/app-deploy.yaml` file in each `services` subdirectory is automatically maintained by our [GitOps](/infrastructure/devops-gitops/) pipelines.\n\n  The main area of customization for individual environments will be done in each service's `overlays` subdirectory, as this subdirectory provides the ability to modify and update the base `app-deploy.yaml` file at deploy time.\n\n---\n\n## Service overview\n\nIn this section, we will walk through the Fleet microservice's [`/overlays` subdirectory ](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/tree/master/environments/example-es-truststore/services/fleetms/overlays) to describe what operations can be performed on the base `app-deploy.yaml` through the Kustomize framework.\n\n### Adding Kafka credentials\n\nThe majority of our Kafka-based microservices look for configuration and credential information defined as environment variables upon startup. This makes it easy to configure, update, and manage running application instances when configuration and credential information changes.\n\nTo add the necessary credential information to a given microservice at deploy time, we use the [/services/fleetms/overlays/appsody-env-patch.yaml](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml) overlay to append `KAFKA_USER` and `KAFKA_PASSWORD` environment variables to list of environment variables already defined in the [base `app-deploy.yaml` file](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/base/config/app-deploy.yaml).\n\n### Adding Kafka certificates\n\nTo add the required SSL/TLS certificates necessary for connecting to secured Apache Kafka / IBM Event Streams systems, you must inject the certificate file dynamically at deploy time. This process can be completed in three steps:\n  1. Create a Kubernetes Secret containing the Certificate file\n  2. Create a Kubernetes Volume in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, based on the Secret\n  3. Create a Kubernetes VolumeMount in the Kubernetes Deployment, AppsodyApplication, or OpenLibertyApplication specification, mounting the previously-defined Volume to a known location inside of a Pod.\n\nTo perform these steps in our GitOps implementation:\n  1. Step 1 is achieved through the artifacts defined in the `/env/base/credentials` subdirectory of either of the example environments.\n  2. Step 2 is achieved through the [`/services/fleetms/overlays/appsody-volumes.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volumes.yaml) overlay.\n  3. Step 3 is achieved through the [`/services/fleetms/overlays/appsody-volume-mounts.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-volume-mounts.yaml) overlay and the inclusion of the well-known location of the injected Certificate via the [`/services/fleetms/overlays/appsody-env-patch.yaml`](https://github.com/ibm-cloud-architecture/refarch-kc-gitops/blob/master/environments/example-es-truststore/services/fleetms/overlays/appsody-env-patch.yaml) overlay.\n\n## Creating a new environment\n\nTo create a new environment, you will want to use one of the environments described above as a template and refine it as needed.\n\n1. Fork this repository.\n2. Copy the desired environment to a new subdirectory in the `/environments` directory.\n3. Update the necessary `overlays/kustomization.yaml` files and referenced files to suit your environment, removing unneccessary modifications and adding in any new requirements.\n4. Manually validate the environment via a `kubectl kustomize environments/__your-new-environment__`\n5. Commit and push your changes to your forked repository\n6. Follow along with our [Continuous Delivery](/infrastructure/devops-continuous-delivery/) chapter to configure ArgoCD to deploy the environment.\n\n# Next steps\n\n_For details on how the Continuous Delivery implementation leverages the GitOps artifacts,_ reference the peer [Continuous Delivery (CD)](/infrastructure/devops-continuous-delivery/) chapter of this manual.\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/infrastructure/devops-gitops/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}