{"componentChunkName":"component---src-pages-quickstart-tutorial-deploy-on-ibm-openlabs-mdx","path":"/quickstart-tutorial/deploy-on-ibm-openlabs/","result":{"pageContext":{"frontmatter":{"title":"Quickstart Tutorial","description":"Simple end-to-end deployment scenario for the KContainer Shipping Container Reference Implementation.","tabs":["Deploy on IBM OpenLabs","Deploy on OpenShift Playgrounds"]},"relativePagePath":"/quickstart-tutorial/deploy-on-ibm-openlabs.mdx","titleType":"append","MdxNode":{"id":"89ed20b8-6d8c-5a35-b17c-a778a21f467e","children":[],"parent":"25e2161c-deba-5759-a3e2-5e40f6e31376","internal":{"content":"---\ntitle: Quickstart Tutorial\ndescription: Simple end-to-end deployment scenario for the KContainer Shipping Container Reference Implementation.\ntabs: ['Deploy on IBM OpenLabs', 'Deploy on OpenShift Playgrounds']\n---\n\n## Introduction\n\nIn this tutorial, you will:\n\n- Deploy the reference implementation to a standalone OpenShift cluster.\n- Create an order via the UI.\n- Check on existing orders.\n- View information about the Fleet.\n\nEach of these business processes will be executed step-by-step using the demonstration APIs and some scripts.\n\n### Pre-requisites\n\n- **Red Hat OpenShift Container Platform** - this quickstart utilizes either the [OpenShift Playgrounds](https://learn.openshift.com/playgrounds/openshift45/) or the [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift).\n- ... and that's it!!! Everything else is provided for you via OpenShift Operators or through existing GitHub repositories.\n- Additional self-paced learning can be done to integrate the deployed reference implementation with additional Kafka offerings, such as _IBM Event Streams_, _Red Hat AMQ Streams_, or _Confluent Platform_.\n\n## Deploy the reference implementation\n\n### IBM OpenLabs\n\nIn this section, we are going to see how to deploy the KContainer Shipping Container Reference Implementation on the [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift) hosted environment.\n\n1. Go to [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift) in a browser and click on `Launch Lab` button for **Lab 6**.\n\n  ![OpenLabs1](images/openLabs1.png)\n\n1. Sign in with your IBM Cloud account or register for an IBM Cloud account.\n\n  ![OpenLabs2](images/openLabs2.png)\n\n1. You will be presented with a dialog asking you whether you have an **Opportunity Id** or not. If you don't have it or don't no, just select **No** and click on **Launch Lab**.\n\n1. You should now see your IBM OpenLabs environment.\n\n  ![OpenLabs4](images/openLabs4.png)\n\n1. On the left hand side navigation menu, click on the **Quick Links and Common Commnads** section. Now, if you scroll down on the instructions shown on your screen, you should reach the **Commonly Used Command** section of these and in there you should see an `oc login ...` command to get your terminal associated to this IBM OpenLabs Lab 6 logged into the OpenShift cluster that you will be working with for this quickstart tutorial. Click on the `oc login...` command and you should see a `Login successful` message on the terminal.\n\n  ![OpenLabs8](images/openLabs8.png)\n\n1. In the terminal associated to your lab, download the [kcontainer-quickstart-ocp.sh](https://github.com/ibm-cloud-architecture/refarch-kc/tree/master/scripts/kcontainer-quickstart-ocp.sh) file:\n\n  ```\n  curl -o kcontainer-quickstart-ocp.sh https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-kc/master/scripts/kcontainer-quickstart-ocp.sh\n  chmod +x kcontainer-quickstart-ocp.sh\n  ```\n\n  <br/>\n\n  ![OpenLabs9](images/openLabs9.png)\n\n1. Execute the quickstart deployment script with the following command:\n\n  ```\n  ./kcontainer-quickstart-ocp.sh --skip-login\n  ```\n  **IMPORTANT:** do not forget the **- -skip-login** flag since we have already logged into the RedHat OpenShift cluster above.\n\n1. Wait for the deployment to be active and ready when you are prompted with `Press any key to continue once an order has been submitted...`.\n\n  ![OpenLabs10](images/openLabs10.png)\n\n1. Grab the User Interface Microservice url and credentials and open it up in your web browser.\n\n  ![OpenLabs11](images/openLabs11.png)\n\n   _(\\*) This will be referred to as_ `kc-ui-shipping.cluster.local` _in the step 2 of this quickstart._\n\n1. You can also check all the resources created by the `kcontainer-quickstart-ocp.sh` script in the RedHat OpenShift console by clicking on the OpenShift web console quick link presented at the top of the instructions section of the OpenLabs Lab6 website.\n\n  ![OpenLabs5](images/openLabs5.png)\n\n1. You should now see your OpenShift web console.\n\n  ![OpenLabs7](images/openLabs7.png)\n\n## Run the Demo\n\n### KContainer Manufacturer creating an order\n\nOrders are created via the manufacturer. For a reminder of the different personas, view the [Scenario Overview](/business-scenario/scenario-overview/).\n\n* Navigate to `http://kc-ui-shipping.cluster.local` (replacing the actual URL of the `kc-ui` microservice with the value output while running the quickstart script or available via `oc get route kc-ui`) to access the UI home page:\n\n![kc-home](images/kc-home.png)\n\nTo log in to the home page, you will need the following user email and password:\n\n- Email: eddie@email.com\n- Password: Eddie\n\nThe initial UI homepage shows an illustrated version of the business process. There are four tiles that can be used to simulate different parts of the outlined business process.\n\n* From the `Initiate Orders - Manufacturer` create a new 'fresh product' order to ship overseas. This simulates the activity that would usually be carried out by the manufacturer in our scenario.\n\n<InlineNotification kind=\"warning\">Do we need to have specific input here for containers to match/be found?</InlineNotification>\n\nTo represent different manufacturers, the first select box has been designed to support multiple scenarios in the future. For the purposes of this quickstart tutorial, select 'GoodManuf'.\n\n![](images/kc-manuf-select.png)\n\nOnce the manufacturer is selected, a list of existing orders will be displayed.\n\n![](images/kc-orders.png)\n\n* Select one order using the `Arrow` icon. This will allow you to view the order details:\n\n![](images/kc-order.png)\n\nAs illustrated in the CQRS diagram:\n\nThe creation of the order goes to the [Order Command microservice](/microservices/order-command/) which publishes an `OrderCreated` event to the `orders` topic and then consumes it to persist the data to its database. See the [source code here](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/order-command-ms/src/main/java/ibm/gse/orderms/domain/service/ShippingOrderService.java#L39-L47).\n\n* We can create a consumer to take messages from the `orders` topic by running the following command from the same terminal the quickstart deployment script was run from:\n\n```oc rsh my-cluster-kafka-0 bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --timeout-ms 10000 --topic orders```\n\nAfter running this, you should be able to see the following order with the status of `pending` and the type of event being `OrderCreated`.\n\n```json\n{\"payload\":{\n    \"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\",\n    \"productID\":\"Carrot\",\n    \"customerID\":\"GoodManuf\",\n    \"quantity\":10000,\n    \"pickupAddress\": \"...\",\n    \"expectedDeliveryDate\":\"2019-03-31T13:30Z\",\n    \"status\":\"pending\"},\n\"type\":\"OrderCreated\",\n\"version\":\"1\"}\n\n```\n\n### KContainer Shipment Manager looking at Orders\n\n* From the home page, click on the Shipment Manager - Shipping Inc tile:\n\n![](images/shipment-inc.png)\n\nThe home page lists the order that the shipment company received in the previous step.\n\n![](images/kc-shipment-home.png)\n\nThe status of events will be modified over time while the order is processed down stream by the voyage and container services. The following sequence diagram illustrates the flow:\n\n![](images/kc-order-seq-diag.png)\n\nLooking at the events in the voyage service\n```\nvoyages_1     |  emitting {\"timestamp\":1548788544290,\"type\":\"OrderAssigned\",\"version\":\"1\",\"payload\":{\"voyageID\":100,\"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\"}}\n```\n\nor on the `orders` topic:\n\n```json\n{\"timestamp\":1548792921679,\n\"type\":\"OrderAssigned\",\"version\":\"1\",\n\"payload\":{\"voyageID\":100,\"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\"}}\n\n```\n\n### View Fleet information\n\n<InlineNotification kind=\"warning\"><strong>UNDER CONSTRUCTION</strong></InlineNotification>\n\nNote: *The term 'Blue Water' referred to here means at sea (including ports and coastal waters).*\n\n* From the home page, select the `Simulate Blue Water` tile. Select one of the available fleet. As of now, only the North Pacific has fleet data:\n\n![](images/kc-fleet-select.png)\n\nThe fleet panel lists the ships, their location and status and a map:\n\n![](images/kc-fleet-home.png)\n\n* Select one ship with the edit button. You will see the ship detail view:\n\n![](images/kc-ship-detail.png)\n\nThis view contains information about the ship itself, it's position at sea and the load. There is also an option to simulate a number of disaster scenarios that could play out at sea, however this functionality is not yet implemented.\n\nThere are currently three pre-defined scenarios, which will be implemented in the future:\n\n* Fire affecting some containers\n* Reefer down\n* Ship experiencing conditions that cause reefers to exceed desired temperature.\n\n_This quickstart guide will be updated as the project evolves and new capability is added. If you have any issues or queries with this quickstart guide, please [raise an issue](https://github.com/ibm-cloud-architecture/refarch-kc/issues) in the github repo._\n","type":"Mdx","contentDigest":"73945326007a7cf0b32d7d4f7778bb5e","counter":361,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Quickstart Tutorial","description":"Simple end-to-end deployment scenario for the KContainer Shipping Container Reference Implementation.","tabs":["Deploy on IBM OpenLabs","Deploy on OpenShift Playgrounds"]},"exports":{},"rawBody":"---\ntitle: Quickstart Tutorial\ndescription: Simple end-to-end deployment scenario for the KContainer Shipping Container Reference Implementation.\ntabs: ['Deploy on IBM OpenLabs', 'Deploy on OpenShift Playgrounds']\n---\n\n## Introduction\n\nIn this tutorial, you will:\n\n- Deploy the reference implementation to a standalone OpenShift cluster.\n- Create an order via the UI.\n- Check on existing orders.\n- View information about the Fleet.\n\nEach of these business processes will be executed step-by-step using the demonstration APIs and some scripts.\n\n### Pre-requisites\n\n- **Red Hat OpenShift Container Platform** - this quickstart utilizes either the [OpenShift Playgrounds](https://learn.openshift.com/playgrounds/openshift45/) or the [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift).\n- ... and that's it!!! Everything else is provided for you via OpenShift Operators or through existing GitHub repositories.\n- Additional self-paced learning can be done to integrate the deployed reference implementation with additional Kafka offerings, such as _IBM Event Streams_, _Red Hat AMQ Streams_, or _Confluent Platform_.\n\n## Deploy the reference implementation\n\n### IBM OpenLabs\n\nIn this section, we are going to see how to deploy the KContainer Shipping Container Reference Implementation on the [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift) hosted environment.\n\n1. Go to [IBM OpenLabs](https://developer.ibm.com/openlabs/openshift) in a browser and click on `Launch Lab` button for **Lab 6**.\n\n  ![OpenLabs1](images/openLabs1.png)\n\n1. Sign in with your IBM Cloud account or register for an IBM Cloud account.\n\n  ![OpenLabs2](images/openLabs2.png)\n\n1. You will be presented with a dialog asking you whether you have an **Opportunity Id** or not. If you don't have it or don't no, just select **No** and click on **Launch Lab**.\n\n1. You should now see your IBM OpenLabs environment.\n\n  ![OpenLabs4](images/openLabs4.png)\n\n1. On the left hand side navigation menu, click on the **Quick Links and Common Commnads** section. Now, if you scroll down on the instructions shown on your screen, you should reach the **Commonly Used Command** section of these and in there you should see an `oc login ...` command to get your terminal associated to this IBM OpenLabs Lab 6 logged into the OpenShift cluster that you will be working with for this quickstart tutorial. Click on the `oc login...` command and you should see a `Login successful` message on the terminal.\n\n  ![OpenLabs8](images/openLabs8.png)\n\n1. In the terminal associated to your lab, download the [kcontainer-quickstart-ocp.sh](https://github.com/ibm-cloud-architecture/refarch-kc/tree/master/scripts/kcontainer-quickstart-ocp.sh) file:\n\n  ```\n  curl -o kcontainer-quickstart-ocp.sh https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-kc/master/scripts/kcontainer-quickstart-ocp.sh\n  chmod +x kcontainer-quickstart-ocp.sh\n  ```\n\n  <br/>\n\n  ![OpenLabs9](images/openLabs9.png)\n\n1. Execute the quickstart deployment script with the following command:\n\n  ```\n  ./kcontainer-quickstart-ocp.sh --skip-login\n  ```\n  **IMPORTANT:** do not forget the **- -skip-login** flag since we have already logged into the RedHat OpenShift cluster above.\n\n1. Wait for the deployment to be active and ready when you are prompted with `Press any key to continue once an order has been submitted...`.\n\n  ![OpenLabs10](images/openLabs10.png)\n\n1. Grab the User Interface Microservice url and credentials and open it up in your web browser.\n\n  ![OpenLabs11](images/openLabs11.png)\n\n   _(\\*) This will be referred to as_ `kc-ui-shipping.cluster.local` _in the step 2 of this quickstart._\n\n1. You can also check all the resources created by the `kcontainer-quickstart-ocp.sh` script in the RedHat OpenShift console by clicking on the OpenShift web console quick link presented at the top of the instructions section of the OpenLabs Lab6 website.\n\n  ![OpenLabs5](images/openLabs5.png)\n\n1. You should now see your OpenShift web console.\n\n  ![OpenLabs7](images/openLabs7.png)\n\n## Run the Demo\n\n### KContainer Manufacturer creating an order\n\nOrders are created via the manufacturer. For a reminder of the different personas, view the [Scenario Overview](/business-scenario/scenario-overview/).\n\n* Navigate to `http://kc-ui-shipping.cluster.local` (replacing the actual URL of the `kc-ui` microservice with the value output while running the quickstart script or available via `oc get route kc-ui`) to access the UI home page:\n\n![kc-home](images/kc-home.png)\n\nTo log in to the home page, you will need the following user email and password:\n\n- Email: eddie@email.com\n- Password: Eddie\n\nThe initial UI homepage shows an illustrated version of the business process. There are four tiles that can be used to simulate different parts of the outlined business process.\n\n* From the `Initiate Orders - Manufacturer` create a new 'fresh product' order to ship overseas. This simulates the activity that would usually be carried out by the manufacturer in our scenario.\n\n<InlineNotification kind=\"warning\">Do we need to have specific input here for containers to match/be found?</InlineNotification>\n\nTo represent different manufacturers, the first select box has been designed to support multiple scenarios in the future. For the purposes of this quickstart tutorial, select 'GoodManuf'.\n\n![](images/kc-manuf-select.png)\n\nOnce the manufacturer is selected, a list of existing orders will be displayed.\n\n![](images/kc-orders.png)\n\n* Select one order using the `Arrow` icon. This will allow you to view the order details:\n\n![](images/kc-order.png)\n\nAs illustrated in the CQRS diagram:\n\nThe creation of the order goes to the [Order Command microservice](/microservices/order-command/) which publishes an `OrderCreated` event to the `orders` topic and then consumes it to persist the data to its database. See the [source code here](https://github.com/ibm-cloud-architecture/refarch-kc-order-ms/blob/master/order-command-ms/src/main/java/ibm/gse/orderms/domain/service/ShippingOrderService.java#L39-L47).\n\n* We can create a consumer to take messages from the `orders` topic by running the following command from the same terminal the quickstart deployment script was run from:\n\n```oc rsh my-cluster-kafka-0 bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --timeout-ms 10000 --topic orders```\n\nAfter running this, you should be able to see the following order with the status of `pending` and the type of event being `OrderCreated`.\n\n```json\n{\"payload\":{\n    \"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\",\n    \"productID\":\"Carrot\",\n    \"customerID\":\"GoodManuf\",\n    \"quantity\":10000,\n    \"pickupAddress\": \"...\",\n    \"expectedDeliveryDate\":\"2019-03-31T13:30Z\",\n    \"status\":\"pending\"},\n\"type\":\"OrderCreated\",\n\"version\":\"1\"}\n\n```\n\n### KContainer Shipment Manager looking at Orders\n\n* From the home page, click on the Shipment Manager - Shipping Inc tile:\n\n![](images/shipment-inc.png)\n\nThe home page lists the order that the shipment company received in the previous step.\n\n![](images/kc-shipment-home.png)\n\nThe status of events will be modified over time while the order is processed down stream by the voyage and container services. The following sequence diagram illustrates the flow:\n\n![](images/kc-order-seq-diag.png)\n\nLooking at the events in the voyage service\n```\nvoyages_1     |  emitting {\"timestamp\":1548788544290,\"type\":\"OrderAssigned\",\"version\":\"1\",\"payload\":{\"voyageID\":100,\"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\"}}\n```\n\nor on the `orders` topic:\n\n```json\n{\"timestamp\":1548792921679,\n\"type\":\"OrderAssigned\",\"version\":\"1\",\n\"payload\":{\"voyageID\":100,\"orderID\":\"1fcccdf2-e29d-4b30-8e52-8116dc2a01ff\"}}\n\n```\n\n### View Fleet information\n\n<InlineNotification kind=\"warning\"><strong>UNDER CONSTRUCTION</strong></InlineNotification>\n\nNote: *The term 'Blue Water' referred to here means at sea (including ports and coastal waters).*\n\n* From the home page, select the `Simulate Blue Water` tile. Select one of the available fleet. As of now, only the North Pacific has fleet data:\n\n![](images/kc-fleet-select.png)\n\nThe fleet panel lists the ships, their location and status and a map:\n\n![](images/kc-fleet-home.png)\n\n* Select one ship with the edit button. You will see the ship detail view:\n\n![](images/kc-ship-detail.png)\n\nThis view contains information about the ship itself, it's position at sea and the load. There is also an option to simulate a number of disaster scenarios that could play out at sea, however this functionality is not yet implemented.\n\nThere are currently three pre-defined scenarios, which will be implemented in the future:\n\n* Fire affecting some containers\n* Reefer down\n* Ship experiencing conditions that cause reefers to exceed desired temperature.\n\n_This quickstart guide will be updated as the project evolves and new capability is added. If you have any issues or queries with this quickstart guide, please [raise an issue](https://github.com/ibm-cloud-architecture/refarch-kc/issues) in the github repo._\n","fileAbsolutePath":"/home/runner/work/refarch-kc/refarch-kc/docs/src/pages/quickstart-tutorial/deploy-on-ibm-openlabs.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}