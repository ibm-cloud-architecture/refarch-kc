(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{ihyo:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return O}));var a=n("wx14"),r=n("zLVn"),i=(n("q1tI"),n("7ljp")),o=n("013z"),l=(n("qKvR"),{}),c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",t)}},p=c("InlineNotification"),b=c("PageDescription"),s=c("AnchorLinks"),u=c("AnchorLink"),m={_frontmatter:l},d=o.a;function O(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(d,Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)(p,{kind:"warning",mdxType:"InlineNotification"},Object(i.b)("strong",null,"TODO")," - UNDER CONSTRUCTION"),Object(i.b)(b,{mdxType:"PageDescription"},"This a simple vessel source events generator taking into account the route from two harbors, the vessel characteristic and the geodetic curve shortest path."),Object(i.b)(s,{mdxType:"AnchorLinks"},Object(i.b)(u,{mdxType:"AnchorLink"},"Overview"),Object(i.b)(u,{mdxType:"AnchorLink"},"Build"),Object(i.b)(u,{mdxType:"AnchorLink"},"Run"),Object(i.b)(u,{mdxType:"AnchorLink"},"Usage Details")),Object(i.b)("h2",null,"Overview"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Description:")," This microservice has been implemented using the Appsody Microprofile 3.2 OpenLiberty stack."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Github repository:")," ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ibm-cloud-architecture/refarch-kc-vessel-simulator"},"refarch-kc-vessel-simulator")),Object(i.b)(p,{kind:"warning",mdxType:"InlineNotification"},Object(i.b)("strong",null,"TODO")," Update topics, events, and patterns with the revised simulation design"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Kafka topics consumed from:")," TBD"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Kafka topics produced to:")," TBD"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Events reacted to:")," TBD"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Events produced:")," TBD"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"EDA Patterns implemented:")," TBD"),Object(i.b)("h2",null,"Build"),Object(i.b)("p",null,"This microservice is built using the ",Object(i.b)("a",{parentName:"p",href:"https://appsody.dev/"},"Appsody")," development framework. The ",Object(i.b)("a",{parentName:"p",href:"https://appsody.dev/docs/installing/installing-appsody"},"Appsody CLI")," is a required prerequisite for building the application locally."),Object(i.b)("p",null,"Appsody will build the application by pulling the contents of the Appsody Stack it is based on and then performing the local application build inside the containerized environment:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"appsody build -t <yournamespace>/kcontainer-vessel-simulator[:tag] [--push]")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You can optionally specify a container tag. If left blank, ",Object(i.b)("inlineCode",{parentName:"li"},"latest")," will be used."),Object(i.b)("li",{parentName:"ul"},"You can optionally supply the ",Object(i.b)("inlineCode",{parentName:"li"},"--push")," flag to automatically push the built image to specified remote repository.")),Object(i.b)("p",null,"Performing an Appsody build will update the ",Object(i.b)("inlineCode",{parentName:"p"},"app-deploy.yaml")," file in the same directory with current information for the application image, labels, and annotations fields."),Object(i.b)("h2",null,"Run"),Object(i.b)("h3",null,"Deployment parameters"),Object(i.b)(p,{kind:"info",mdxType:"InlineNotification"},Object(i.b)("strong",null,"TODO")," source updated deployment parameters"),Object(i.b)("p",null,"The following deployment parameters are defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"app-deploy.yaml")," file:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Required"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"KAFKA_BROKERS"),Object(i.b)("td",{parentName:"tr",align:null},"YES"),Object(i.b)("td",{parentName:"tr",align:null},"Comma-separated list of Kafka brokers to connect to")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"KAFKA_APIKEY"),Object(i.b)("td",{parentName:"tr",align:null},"NO"),Object(i.b)("td",{parentName:"tr",align:null},"API Key used to connect to SASL-secured Kafka brokers. This is required when connecting to IBM Event Streams clusters.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"TRUSTSTORE_PATH"),Object(i.b)("td",{parentName:"tr",align:null},"NO"),Object(i.b)("td",{parentName:"tr",align:null},"The local path to the required truststore file when connecting to IBM Event Streams on CP4I. See ",Object(i.b)("a",{parentName:"td",href:"#volume-mounts"},Object(i.b)("strong",{parentName:"a"},"Volume Mounts"))," below.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"CONTAINER_TOPIC"),Object(i.b)("td",{parentName:"tr",align:null},"YES"),Object(i.b)("td",{parentName:"tr",align:null},"The topic name used for communication relating to the containers entity.")))),Object(i.b)("h3",null,"Running the microservice locally"),Object(i.b)("p",null,"The Vessel Simulator microservice requires up to one file to be injected at runtime for proper operation. As noted in the ",Object(i.b)("inlineCode",{parentName:"p"},"TRUSTSTORE_PATH")," parameter above, these files are SSL-based certificates which are required to verfiy the identity of the external service when calling it. These files are provided as ",Object(i.b)("inlineCode",{parentName:"p"},'--docker-options "-v host-src:container-dest ..."')," when running the microservice locally and as a Volume Mount when running the microservice on a Kubernetes cluster."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"TRUSTSTORE_PATH")," parameter is documented in the ",Object(i.b)("strong",{parentName:"p"},"Event Streams Certificates")," section of the ",Object(i.b)("a",{parentName:"p",href:"/refarch-kc/infrastructure/required-services/#ibm-event-streams-on-redhat-openshift-container-platform"},"Prerequisites")," page. The Appsody run command should include a parameter similar to ",Object(i.b)("inlineCode",{parentName:"p"},"-v /Users/myuser/Downloads/es-cert.pem:/config/resources/security/es-ssl/es-cert.jks")," in its ",Object(i.b)("inlineCode",{parentName:"p"},"--docker-options")," string to run this microservice locally."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example:")," ",Object(i.b)("inlineCode",{parentName:"p"},'appsody run --docker-options "-v /Users/myuser/Downloads/es-cert.pem:/config/resources/security/es-ssl/es-cert.jks" ...')),Object(i.b)("h3",null,"Running the microservice remotely"),Object(i.b)("p",null,"The ",Object(i.b)("a",{parentName:"p",href:"https://appsody.dev/docs/reference/appsody-operator/"},"Appsody Operator")," is a required prerequisite for deploying the microservice to a remote Kubernetes or OpenShift cluster."),Object(i.b)("p",null,"To deploy the microservice to a remote cluster:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"appsody deploy <yournamespace>/kcontainer-vessel-simulator[:tag] --no-build")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You can omit the ",Object(i.b)("inlineCode",{parentName:"li"},"--no-build")," flag to have Appsody perform a build before deploying the application."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},Object(i.b)("strong",{parentName:"em"},"Note:"))," Performing a build at deploy time requires specifying the absolute container reference path, as well as the ",Object(i.b)("inlineCode",{parentName:"li"},"--push")," flag."),Object(i.b)("li",{parentName:"ul"},"The neccesary deployment parameter information will be read from the ",Object(i.b)("inlineCode",{parentName:"li"},"app-deploy.yaml")," file in the same directory.")),Object(i.b)("h2",null,"Usage Details"),Object(i.b)("h3",null,"REST APIs"),Object(i.b)(p,{kind:"info",mdxType:"InlineNotification"},Object(i.b)("strong",null,"TODO")," REST APIs documentation via Swagger"))}O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-microservices-vessel-simulator-index-mdx-118ddcf8835457b09ea9.js.map